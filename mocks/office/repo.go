// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eibrahimarisoy/car_rental/internal/office (interfaces: OfficeRepositoryInterface)

// Package office is a generated GoMock package.
package office

import (
	reflect "reflect"
	time "time"

	models "github.com/eibrahimarisoy/car_rental/internal/models"
	pagination "github.com/eibrahimarisoy/car_rental/pkg/pagination"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOfficeRepositoryInterface is a mock of OfficeRepositoryInterface interface.
type MockOfficeRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOfficeRepositoryInterfaceMockRecorder
}

// MockOfficeRepositoryInterfaceMockRecorder is the mock recorder for MockOfficeRepositoryInterface.
type MockOfficeRepositoryInterfaceMockRecorder struct {
	mock *MockOfficeRepositoryInterface
}

// NewMockOfficeRepositoryInterface creates a new mock instance.
func NewMockOfficeRepositoryInterface(ctrl *gomock.Controller) *MockOfficeRepositoryInterface {
	mock := &MockOfficeRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockOfficeRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfficeRepositoryInterface) EXPECT() *MockOfficeRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateOffice mocks base method.
func (m *MockOfficeRepositoryInterface) CreateOffice(arg0 *models.Office) (*models.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOffice", arg0)
	ret0, _ := ret[0].(*models.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOffice indicates an expected call of CreateOffice.
func (mr *MockOfficeRepositoryInterfaceMockRecorder) CreateOffice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOffice", reflect.TypeOf((*MockOfficeRepositoryInterface)(nil).CreateOffice), arg0)
}

// FindByOfficeAndVendorID mocks base method.
func (m *MockOfficeRepositoryInterface) FindByOfficeAndVendorID(arg0, arg1 uuid.UUID) (*models.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOfficeAndVendorID", arg0, arg1)
	ret0, _ := ret[0].(*models.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOfficeAndVendorID indicates an expected call of FindByOfficeAndVendorID.
func (mr *MockOfficeRepositoryInterfaceMockRecorder) FindByOfficeAndVendorID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOfficeAndVendorID", reflect.TypeOf((*MockOfficeRepositoryInterface)(nil).FindByOfficeAndVendorID), arg0, arg1)
}

// GetOfficeIDs mocks base method.
func (m *MockOfficeRepositoryInterface) GetOfficeIDs(arg0 uuid.UUID, arg1, arg2 int, arg3, arg4 time.Time) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfficeIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfficeIDs indicates an expected call of GetOfficeIDs.
func (mr *MockOfficeRepositoryInterfaceMockRecorder) GetOfficeIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfficeIDs", reflect.TypeOf((*MockOfficeRepositoryInterface)(nil).GetOfficeIDs), arg0, arg1, arg2, arg3, arg4)
}

// GetOffices mocks base method.
func (m *MockOfficeRepositoryInterface) GetOffices(arg0 *pagination.Pagination) (*[]models.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffices", arg0)
	ret0, _ := ret[0].(*[]models.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffices indicates an expected call of GetOffices.
func (mr *MockOfficeRepositoryInterfaceMockRecorder) GetOffices(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffices", reflect.TypeOf((*MockOfficeRepositoryInterface)(nil).GetOffices), arg0)
}

// GetWorkingDaysByValues mocks base method.
func (m *MockOfficeRepositoryInterface) GetWorkingDaysByValues(arg0 *[]models.WorkingDay) (*[]models.WorkingDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkingDaysByValues", arg0)
	ret0, _ := ret[0].(*[]models.WorkingDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkingDaysByValues indicates an expected call of GetWorkingDaysByValues.
func (mr *MockOfficeRepositoryInterfaceMockRecorder) GetWorkingDaysByValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkingDaysByValues", reflect.TypeOf((*MockOfficeRepositoryInterface)(nil).GetWorkingDaysByValues), arg0)
}
