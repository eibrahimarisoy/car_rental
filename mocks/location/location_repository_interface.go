// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eibrahimarisoy/car_rental/internal/location (interfaces: LocationRepositoryInterface)

// Package location is a generated GoMock package.
package location

import (
	reflect "reflect"

	models "github.com/eibrahimarisoy/car_rental/internal/models"
	pagination "github.com/eibrahimarisoy/car_rental/pkg/pagination"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLocationRepositoryInterface is a mock of LocationRepositoryInterface interface.
type MockLocationRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepositoryInterfaceMockRecorder
}

// MockLocationRepositoryInterfaceMockRecorder is the mock recorder for MockLocationRepositoryInterface.
type MockLocationRepositoryInterfaceMockRecorder struct {
	mock *MockLocationRepositoryInterface
}

// NewMockLocationRepositoryInterface creates a new mock instance.
func NewMockLocationRepositoryInterface(ctrl *gomock.Controller) *MockLocationRepositoryInterface {
	mock := &MockLocationRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLocationRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepositoryInterface) EXPECT() *MockLocationRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateLocation mocks base method.
func (m *MockLocationRepositoryInterface) CreateLocation(arg0 *models.Location) (*models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", arg0)
	ret0, _ := ret[0].(*models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockLocationRepositoryInterfaceMockRecorder) CreateLocation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockLocationRepositoryInterface)(nil).CreateLocation), arg0)
}

// GetAllActiveLocations mocks base method.
func (m *MockLocationRepositoryInterface) GetAllActiveLocations(arg0 *pagination.Pagination) (*[]models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveLocations", arg0)
	ret0, _ := ret[0].(*[]models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveLocations indicates an expected call of GetAllActiveLocations.
func (mr *MockLocationRepositoryInterfaceMockRecorder) GetAllActiveLocations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveLocations", reflect.TypeOf((*MockLocationRepositoryInterface)(nil).GetAllActiveLocations), arg0)
}

// GetLocationByID mocks base method.
func (m *MockLocationRepositoryInterface) GetLocationByID(arg0 uuid.UUID) (*models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByID", arg0)
	ret0, _ := ret[0].(*models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationByID indicates an expected call of GetLocationByID.
func (mr *MockLocationRepositoryInterfaceMockRecorder) GetLocationByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByID", reflect.TypeOf((*MockLocationRepositoryInterface)(nil).GetLocationByID), arg0)
}
